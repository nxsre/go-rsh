// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.2
// source: pb/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RemoteShell_Session_FullMethodName = "/kitex_rsh.RemoteShell/Session"
)

// RemoteShellClient is the client API for RemoteShell service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteShellClient interface {
	Session(ctx context.Context, opts ...grpc.CallOption) (RemoteShell_SessionClient, error)
}

type remoteShellClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteShellClient(cc grpc.ClientConnInterface) RemoteShellClient {
	return &remoteShellClient{cc}
}

func (c *remoteShellClient) Session(ctx context.Context, opts ...grpc.CallOption) (RemoteShell_SessionClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RemoteShell_ServiceDesc.Streams[0], RemoteShell_Session_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &remoteShellSessionClient{ClientStream: stream}
	return x, nil
}

type RemoteShell_SessionClient interface {
	Send(*Input) error
	Recv() (*Output, error)
	grpc.ClientStream
}

type remoteShellSessionClient struct {
	grpc.ClientStream
}

func (x *remoteShellSessionClient) Send(m *Input) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteShellSessionClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteShellServer is the server API for RemoteShell service.
// All implementations must embed UnimplementedRemoteShellServer
// for forward compatibility
type RemoteShellServer interface {
	Session(RemoteShell_SessionServer) error
	mustEmbedUnimplementedRemoteShellServer()
}

// UnimplementedRemoteShellServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteShellServer struct {
}

func (UnimplementedRemoteShellServer) Session(RemoteShell_SessionServer) error {
	return status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedRemoteShellServer) mustEmbedUnimplementedRemoteShellServer() {}

// UnsafeRemoteShellServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteShellServer will
// result in compilation errors.
type UnsafeRemoteShellServer interface {
	mustEmbedUnimplementedRemoteShellServer()
}

func RegisterRemoteShellServer(s grpc.ServiceRegistrar, srv RemoteShellServer) {
	s.RegisterService(&RemoteShell_ServiceDesc, srv)
}

func _RemoteShell_Session_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteShellServer).Session(&remoteShellSessionServer{ServerStream: stream})
}

type RemoteShell_SessionServer interface {
	Send(*Output) error
	Recv() (*Input, error)
	grpc.ServerStream
}

type remoteShellSessionServer struct {
	grpc.ServerStream
}

func (x *remoteShellSessionServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteShellSessionServer) Recv() (*Input, error) {
	m := new(Input)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteShell_ServiceDesc is the grpc.ServiceDesc for RemoteShell service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteShell_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kitex_rsh.RemoteShell",
	HandlerType: (*RemoteShellServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Session",
			Handler:       _RemoteShell_Session_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/service.proto",
}
